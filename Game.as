// Darwin Games 2012package {	import flash.geom.*;	import flash.display.*;	import flash.events.*;	public class Game extends Sprite {		var CONCURRENT_SIMS = 3;		var simulationBitmapDatas;		var simulations;		var spritesheetBitmapData;		var backbufferBitmapData;		var frontbufferBitmapData;		var frontbufferBitmap;		var stageRect;		var origo = new Point(0,0);		var betting = new Betting();		var frameCounter = 0;		var timePerCompo;		function r(obj) {			return new Rectangle(0, 0, obj.width, obj.height);		}		var phase = 'BETTING';		function compoFinished() {			var bestSim = 0;			var bestFitness = 0;			for (var i = 0; i < CONCURRENT_SIMS; i++) {				if (simulations[i].fitness() > bestFitness) {					bestSim = i;					bestFitness = simulations[i].fitness();				}			}			trace('Simulation ' + bestSim + ' wins!');			removeChild(compoScreen);			addChild(betting);			startBetting();		}		function refresh(evt) {			frameCounter++;			if (phase == 'SPORT') {				for (var i = 0; i < CONCURRENT_SIMS; i++) {					var sim = simulations[i];					var simulationBitmapData = simulationBitmapDatas[i];					sim.tick();					sim.render();					frontbufferBitmapData.copyPixels(simulationBitmapData, r(simulationBitmapData), new Point(150, 100 + i * 150), null, new Point(0,0), true);				}				if ((frameCounter%60)==0) {					compoScreen.timer.text = int(compoScreen.timer.text) - 1;					if (int(compoScreen.timer.text) == 0) {						compoFinished();					}				}			}//			frontbufferBitmapData.copyPixels(backbufferBitmapData, r(backbufferBitmapData), origo);		}		var creatures = [];		function makeCreatures() {			for (var i = 0; i < CONCURRENT_SIMS; i++) {				var creatureBitmapData = new BitmapData(32, 32);				creatureBitmapData.copyPixels(spritesheetBitmapData, new Rectangle(i*32,32,32,32), new Point(0,0));				var creature = new Creature(creatureBitmapData);				creatures.push(creature);			}		}		function startSport() {			compoScreen.timer.text = timePerCompo;			phase = 'SPORT';			simulationBitmapDatas = [];			simulations = [];			for (var i = 0; i < CONCURRENT_SIMS; i++) {				var simulationBitmapData = new BitmapData(500, 100);				var sim = new Simulation(simulationBitmapData, spritesheetBitmapData, creatures[i]);				simulationBitmapDatas.push(simulationBitmapData);				simulations.push(sim);			}		}		public function startBetting() {			phase = 'BETTING';			betting.amount1.text = 0;			betting.amount2.text = 0;			betting.amount3.text = 0;		}		public function placeBet1(evt) {			betting.amount1.text = int(betting.amount1.text) + 1;			betting.coins.text = int(betting.coins.text) - 1;		}		public function placeBet2(evt) {			betting.amount2.text = int(betting.amount2.text) + 1;			betting.coins.text = int(betting.coins.text) - 1;		}		public function placeBet3(evt) {			betting.amount3.text = int(betting.amount3.text) + 1;			betting.coins.text = int(betting.coins.text) - 1;		}		var creaturePreviewBitmaps = [];		public function initBettingScreen() {			betting.start.addEventListener(MouseEvent.CLICK, matchStartClicked);			betting.bet1.addEventListener(MouseEvent.CLICK, placeBet1);			betting.bet2.addEventListener(MouseEvent.CLICK, placeBet2);			betting.bet3.addEventListener(MouseEvent.CLICK, placeBet3);			for (var i = 0; i < CONCURRENT_SIMS; i++) {				var creaturePreviewBitmap = new Bitmap(creatures[i].bitmapdata);				creaturePreviewBitmap.x = betting['rect' + (i+1)].x - betting['rect' + (i+1)].width/2;				creaturePreviewBitmap.y = betting['rect' + (i+1)].y - betting['rect' + (i+1)].height/2;				creaturePreviewBitmap.scaleX = 8;				creaturePreviewBitmap.scaleY = 8;				betting.addChild(creaturePreviewBitmap);				creaturePreviewBitmaps.push(creaturePreviewBitmap);							}		}		var compoScreen;		public function matchStartClicked(evt) {			// Could transition here			removeChild(betting);			addChild(compoScreen);			startSport();		}		function initCompoScreen(mainTimeline) {			compoScreen = new CompoScreen();			backbufferBitmapData = new BitmapData(mainTimeline.stage.stageWidth, mainTimeline.stage.stageHeight);			backbufferBitmapData.fillRect(r(backbufferBitmapData), 0x0);			frontbufferBitmapData = backbufferBitmapData.clone();			frontbufferBitmap = new Bitmap(frontbufferBitmapData);			compoScreen.addChild(frontbufferBitmap);			timePerCompo = int(compoScreen.timer.text);		}		public function Game(mainTimeline) {			mainTimeline.addEventListener(Event.ENTER_FRAME, refresh);			spritesheetBitmapData = new Sheet(0,0);			makeCreatures();			initCompoScreen(mainTimeline);			initBettingScreen();			addChild(betting);			startBetting();//			startSport();		}	}}